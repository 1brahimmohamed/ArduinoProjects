#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/0c35ba2e-4dfa-4e2b-a990-3466367f41b6 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudAngle angle;
  CloudLight led_switch;
  CloudSwitch bed;
  CloudTelevision servoControl;
  CloudTemperatureSensor temprature;
  int ldr;
  int servoAngle;
  CloudRelativeHumidity humidity;
  bool airQuality;
  bool piezo;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "DHT.h"
#include "Flex.h"
#include "Ultra.h"
#include "LDR.h"
#include <ESP32Servo.h>

Ldr ldr1;
#define led 2
Servo myServo;
#define DHTPIN 33
#define DHTTYPE DHT11
#define air1 35
Flex flex1;
# define piezoPin 36
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  ldr1.ldrBegin(34);
  dht.begin();
  myServo.attach(32);
  flex1.FlexBegin(39);
  pinMode(air1,INPUT);
  // Defined in thingProperties.h
  initProperties();
  pinMode(led,OUTPUT);
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  float airRead=digitalRead(air1);
  int piezoRead=analogRead(piezoPin);
  float ldrRead= ldr1.get_intensity();
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  float flexAngle= flex1.getAngle();
  Serial.print("Piezo: ");
  Serial.println(piezoRead);
  Serial.print("Ldr: ");
  Serial.println(ldrRead);
  Serial.print("Temp: ");
  Serial.print(t);
  Serial.print(" H: ");
  Serial.println(h);
  Serial.print("Angle: ");
  Serial.println(flexAngle);
  Serial.print("Air Quality: ");
  Serial.println(airRead);
  airQuality= airRead;
  humidity=h;
  temprature=t;
  angle=servoAngle;
  ldr=ldrRead;
  if(piezoRead>700)
    piezo=false;
  else
    piezo=true;
  airQuality=!airRead;
  
  angle+=3;
}


/*
  Since LedSwitch is READ_WRITE variable, onLedSwitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedSwitchChange()  {
  // Add your code here to act upon LedSwitch change
  if(led_switch)
    digitalWrite(led,HIGH);
  else
    digitalWrite(led,LOW);
}







/*
  Since ServoAngle is READ_WRITE variable, onServoAngleChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onServoAngleChange()  {
  // Add your code here to act upon ServoAngle change
  int sAngle = map(servoAngle,0,90,50,115);
  myServo.write(180-sAngle);
  angle=servoAngle+3;
}



/*
  Since ServoControl is READ_WRITE variable, onServoControlChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onServoControlChange()  {
  // Add your code here to act upon ServoControl change
  int angle = servoControl.getVolume();
  Serial.print(angle);
}



/*
  Since Bed is READ_WRITE variable, onBedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBedChange()  {
  // Add your code here to act upon Bed change
  if(bed){
    
    myServo.write(180-90);
  }else{
    myServo.write(30);
  }
}



